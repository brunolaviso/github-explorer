[{"/home/laviso/Projetos/GoStack/nivel-03/05-primeiro-projeto-react/src/styles/global.ts":"1","/home/laviso/Projetos/GoStack/nivel-03/05-primeiro-projeto-react/src/pages/Dashboard/styles.ts":"2","/home/laviso/Projetos/GoStack/nivel-03/05-primeiro-projeto-react/src/pages/Dashboard/index.tsx":"3","/home/laviso/Projetos/GoStack/nivel-03/05-primeiro-projeto-react/src/routes/index.tsx":"4","/home/laviso/Projetos/GoStack/nivel-03/05-primeiro-projeto-react/src/pages/Repository/index.tsx":"5","/home/laviso/Projetos/GoStack/nivel-03/05-primeiro-projeto-react/src/pages/Repository/styles.ts":"6"},{"size":610,"mtime":1606950433999,"results":"7","hashOfConfig":"8"},{"size":2197,"mtime":1606929946379,"results":"9","hashOfConfig":"8"},{"size":3034,"mtime":1606953840115,"results":"10","hashOfConfig":"8"},{"size":382,"mtime":1606933066056,"results":"11","hashOfConfig":"8"},{"size":4150,"mtime":1606953735883,"results":"12","hashOfConfig":"8"},{"size":2240,"mtime":1606950330610,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o8ynhq",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/laviso/Projetos/GoStack/nivel-03/05-primeiro-projeto-react/src/styles/global.ts",[],"/home/laviso/Projetos/GoStack/nivel-03/05-primeiro-projeto-react/src/pages/Dashboard/styles.ts",[],"/home/laviso/Projetos/GoStack/nivel-03/05-primeiro-projeto-react/src/pages/Dashboard/index.tsx",["27"],"import React, { useState, useEffect, FormEvent, useDebugValue } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport api from '../../services/api';\nimport { Link } from 'react-router-dom';\n\nimport logoImg from '../../assets/logo.svg'\n\nimport { Title, Form, Repositories, Error } from './styles';\n\ninterface Repository {\n    full_name: string;\n    description: string;\n    owner: {\n        login: string;\n        avatar_url: string;\n    };\n}\n\nconst Dashboard: React.FC = () => {\n\n    const [newRepo, setNewRepo] = useState('');\n    const [inputError, setInputError] = useState('');\n    const [repositories, setRepositories] = useState<Repository[]>(() => {\n        const storageRepositories = localStorage.getItem (\n            '@GithubExplorer:repositories'\n        );\n\n        if (storageRepositories) {\n            return JSON.parse(storageRepositories);\n        };\n\n        return[];\n    });\n\n    useEffect(() => {\n        localStorage.setItem('@GithubExplorer:repositories', JSON.stringify(repositories))\n    }, [repositories])\n\n    async function handleAddRepository(event: FormEvent<HTMLFormElement>): Promise<void> { \n\n        event.preventDefault();\n\n        if (!newRepo) {\n            setInputError('Digite o autor/nome do reposit贸rio');\n            return;\n        }\n\n        try {\n            const response = await api.get<Repository>(`repos/${newRepo}`);\n            const repository = response.data;\n    \n            setRepositories([...repositories, repository]);\n            setNewRepo('');\n            setInputError('');\n        } catch (err) {\n            setInputError('Erro na busca por esse reposit贸rio');\n        }\n    }\n\n    return(\n        <>\n            <img src={logoImg} alt=\"Github Explorer\"/>\n            <Title>Explore reposit贸rios no Github</Title>\n\n            <Form hasError={ !! inputError } onSubmit={handleAddRepository}>\n                <input \n                value={newRepo}\n                onChange={e => setNewRepo(e.target.value)}\n                placeholder=\"Digite o nome do reposit贸rio\"/>\n                <button type=\"submit\">Pesquisar</button>\n            </Form>\n\n            { inputError && <Error>{inputError}</Error> }\n\n            <Repositories>\n                {repositories.map(repository => (\n                    <Link key={repository.full_name} to={`/repositories/${repository.full_name}`}>\n                        <img \n                            src={repository.owner.avatar_url}\n                            alt={repository.owner.login}\n                        />\n                        <div>\n                            <strong>\n                                {repository.full_name}\n                            </strong>\n                            <p>\n                                {repository.description}\n                            </p>\n                        </div>\n                        <FiChevronRight size={20} />\n                    </Link>\n                ))}\n            </Repositories>\n        </>\n    )\n};\n\nexport default Dashboard;","/home/laviso/Projetos/GoStack/nivel-03/05-primeiro-projeto-react/src/routes/index.tsx",[],"/home/laviso/Projetos/GoStack/nivel-03/05-primeiro-projeto-react/src/pages/Repository/index.tsx",["28"],"/home/laviso/Projetos/GoStack/nivel-03/05-primeiro-projeto-react/src/pages/Repository/styles.ts",[],{"ruleId":"29","severity":1,"message":"30","line":1,"column":49,"nodeType":"31","messageId":"32","endLine":1,"endColumn":62},{"ruleId":"33","severity":1,"message":"34","line":33,"column":7,"nodeType":"31","messageId":"35","endLine":33,"endColumn":27},"@typescript-eslint/no-unused-vars","'useDebugValue' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-redeclare","'Repository' is already defined.","redeclared"]